# Continuo-->Categorico
# mtcars:dataframe
# mpg:contiene valores numericos
ggplot(mtcars, aes(x = wt, y = mpg)) +  geom_point()
ggplot(mtcars, aes(x = wt, y = factor(mpg))) +  geom_point()

# Color: color=, genera una leyenda del color
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
  geom_point()

# Tamaño: size=, genera una leyenda del tamaño
ggplot(mtcars, aes(x = wt, y = mpg, size = disp)) +
  geom_point()
  
# Representa valores como puntos y añade linea de tendencia
(diamonds, aes(x = carat, y = price))+geom_point()+geom_smooth()

# Asignar objetos ggplot reutilizables
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))

# Quitar bordes de error en linea de tendencia
dia_plot + geom_smooth(se = FALSE)

# Linetype: arg en aes() para setear el tipo de linea

# Agregar una linea de tendencia por grupo y a nivel dataset
  gplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
  geom_point()+ 
  geom_smooth(method=lm,se=FALSE)+   
  geom_smooth(aes(group=1),method=lm,se=FALSE,linetype=2)

# Uso de dataframes mas "normalizados"
  ggplot(iris.tidy, aes(x = Species, y = Value, color = Part)) +
  geom_jitter() +
  facet_grid(. ~ Measure)
  
# Uso del gather() y separate() transformar data->tidy
iris.tidy <- iris %>%
  gather(key, Value, -Species) %>%          #Desdobla cada columna
  separate(key, c("Part", "Measure"), "\\.") #Separa el campo generado por el gather dado un patron
# Generando iris.wide
iris.wide <- iris %>%
  gather(key, value, -Species, -Flower) %>%
  separate(key, c("Part","Measure"), "\\.") %>%
  spread(Measure, value)
  
# Aesthetic parameters
# geom_point(default): shape=19 (a solid circle with an outline the same colour as the inside)
# shape=1 (hollow)
# shape=16 (solid no outline)
# shape=21 (use both fill for the inside and col for the outline)

# Map cyl to alpha
ggplot(mtcars,aes(x=wt,y=mpg,alpha=cyl))+geom_point()

# Map cyl to shape 
ggplot(mtcars,aes(x=wt,y=mpg,shape=cyl))+geom_point()

# Map cyl to label
ggplot(mtcars,aes(x=wt,y=mpg,label=cyl))+geom_text() # para mostrar las etiquetas, se requiere el geom_text

############################################# ATRIBUTOS #########################################################3

# Define a hexadecimal color
my_color <- "#4ABEFF"
# my_color sobreescribe el color dado en aes()
ggplot(mtcars,aes(x=wt,y=mpg,color=cyl))+geom_point(color=my_color)

# shape>20 distingue, fill en aes() ; shape en geom()
# 3 - Plot 2, with fill instead of col aesthetic, plut shape and size attributes in geom layer.
ggplot(mtcars,aes(x=wt,y=mpg,fill=cyl))+geom_point(size=10,shape=23,color=my_color)


# Expand to draw text with label rownames(mtcars) and color red
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl,color=red)) + geom_text(label=rownames(mtcars),color="red")

# Uso de factor() para categorizar variables, tmb se puede utilizar ratios: hp/wt
ggplot(mtcars,aes(x=mpg,y=qsec,color=factor(cyl),shape=factor(am),size=(hp/wt))) + geom_point()

################################################################################################################ 18/03/2018
############# Position #####
# The base layer, cyl.am, is available for you
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
# Add geom (position = "stack" by default)

# 1 - Create jittered plot of mtcars, mpg onto x, 0 onto y
ggplot(mtcars, aes(x = mpg, y = 0)) +
  geom_jitter()

# 2 - Add function to change y axis limits
ggplot(mtcars, aes(x = mpg, y = 0)) +
  geom_jitter()+
  scale_y_continuous(limits=c(-2,2))

cyl.am + 
  geom_bar(position="stack") # Apila x defecto
  
# Fill - muestra proporciones
cyl.am + 
  geom_bar(position = "fill")

# Dodging - principles of similarity and proximity
cyl.am +
  geom_bar(position = "dodge") # Muestra x separado los valores(en barras separadas)
  

# Clean up the axes with scale_ functions
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
cyl.am +
  geom_bar(position = "dodge") +
  scale_x_discrete("Cylinders") + # Define el label del eje x
  scale_y_continuous("Number") + # Define el label del eje y
  scale_fill_manual("Transmission", # Define el nombre en la Leyenda
                    values = val,  # Define el color de las categorias de la leyenda
                    labels = lab)  # Define el nombre de las categorias de la leyenda

#Analisis univariado de observaciones
# 1 - Create jittered plot of mtcars, mpg onto x, 0 onto y
ggplot(mtcars, aes(x = mpg, y = 0)) +
  geom_jitter()

# 2 - Add function to change y axis limits
ggplot(mtcars, aes(x = mpg, y = 0)) +
  geom_jitter()+
  scale_y_continuous(limits=c(-2,2))

##
## You'll have to deal with overplotting when you have:
##
## Large datasets,
## Imprecise data and so points are not clearly separated on your plot (you saw this in the video with the iris dataset),
## Interval data (i.e. data appears at fixed values), or
## Aligned data values on a single axis.

## One very common technique that I'd recommend to always use when you have solid shapes it to use alpha blending (i.e. adding transparency)
## An alternative is to use hollow shapes. These are adjustments to make before even worrying about positioning.
## This addresses the first point as above, which you'll see again in the next exercise.

# Basic scatter plot: wt on x-axis and mpg on y-axis; map cyl to col
ggplot(mtcars,aes(x=wt,y=mpg,col=cyl))+geom_point(size=4)

# Hollow circles - an improvement
ggplot(mtcars,aes(x=wt,y=mpg,col=cyl))+geom_point(size=4,shape=1) #Evitar el overplotting

# Add transparency - very nice
ggplot(mtcars,aes(x=wt,y=mpg,col=cyl))+geom_point(size=4,alpha=0.6) #Evitar el overplotting

# Scatter plot: carat (x), price (y), clarity (color)
str(diamonds)
ggplot(diamonds,aes(x=carat,y=price,col=clarity))+geom_point()

# Adjust for overplotting
ggplot(diamonds,aes(x=carat,y=price,col=clarity))+geom_point(alpha=0.5)

# Scatter plot: clarity (x), carat (y), price (color)
ggplot(diamonds,aes(x=clarity,y=carat,col=price))+geom_point(alpha=0.5)

# Dot plot with jittering
ggplot(diamonds,aes(x=clarity,y=carat,col=price))+geom_point(alpha=0.5,position="jitter")
